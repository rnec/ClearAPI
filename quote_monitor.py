# quote_monitor.py
# Monitor simples de cota√ß√µes em tempo real via WebSocket

import json
import sys
import os
from datetime import datetime
from time import sleep
import signal
import threading

# Adiciona o diret√≥rio ClearAPI ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'ClearAPI'))

try:
    # pylint: disable=import-error
    # Os m√≥dulos est√£o no diret√≥rio ClearAPI/ que √© adicionado ao sys.path
    from websocket_client import initialize_market_data_websocket, sign_ticker_quote  # pylint: disable=import-error
    from get_ticker_quote import get_ticker_quote  # pylint: disable=import-error
except ImportError as e:
    print(f"‚ùå Erro ao importar m√≥dulos: {e}")
    print("üìÅ Verifique se os arquivos est√£o no diret√≥rio ClearAPI/")
    print("üìã Arquivos necess√°rios: websocket_client.py, get_ticker_quote.py")
    sys.exit(1)

# Configura√ß√£o
TICKER = "WINV25"  # Altere aqui para o ativo desejado
IS_RUNNING = True
websocket_connection = None

def format_timestamp():
    """Formata o timestamp atual"""
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]

def print_table_header():
    """Imprime o cabe√ßalho da tabela"""
    print("=" * 70)
    print(f"{'Timestamp':<24} {'Ativo':<10} {'Cota√ß√£o':<15}")
    print("=" * 70)

def print_quote_row(timestamp, ticker, price):
    """Imprime uma linha com a cota√ß√£o"""
    print(f"{timestamp:<24} {ticker:<10} {price:<15.4f}")

def on_message(message):
    """Processa mensagens recebidas do WebSocket"""
    try:
        # O websocket_client j√° converte para dict, ent√£o message j√° √© um dicion√°rio
        if not message:
            return
        
        # Verifica se √© uma mensagem de cota√ß√£o
        if message.get('target') == 'Quote' and message.get('arguments'):
            try:
                quote_data = message['arguments'][0]
                ticker = quote_data.get('ticker')
                last_price = quote_data.get('lastPrice')
                
                if ticker and last_price is not None:
                    timestamp = format_timestamp()
                    print_quote_row(timestamp, ticker, last_price)
                else:
                    print(f"‚ö†Ô∏è Dados de cota√ß√£o incompletos: ticker={ticker}, price={last_price}")
            except (IndexError, KeyError, TypeError) as e:
                print(f"‚ö†Ô∏è Erro ao processar dados de cota√ß√£o: {e}")
                print(f"üìù Dados recebidos: {message.get('arguments', 'N/A')}")
        else:
            # Debug: mostra outros tipos de mensagem (apenas se n√£o for heartbeat)
            target = message.get('target', 'Unknown')
            if target not in ['', 'ping', 'pong', 'heartbeat']:
                print(f"üì® Mensagem recebida: {target}")
                
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico ao processar mensagem: {e}")
        print(f"üìù Mensagem completa: {message}")
        import traceback
        traceback.print_exc()

def on_open():
    """Executado quando a conex√£o WebSocket √© aberta"""
    print(f"WebSocket conectado! Assinando ticker: {TICKER}")
    try:
        # Usa a fun√ß√£o do websocket_client para assinar cota√ß√µes
        sign_ticker_quote(TICKER)
        print(f"‚úÖ Assinatura do ticker {TICKER} realizada com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao assinar ticker {TICKER}: {e}")

def signal_handler(signum, frame):
    """Manipula sinais de interrup√ß√£o para encerramento gracioso"""
    global IS_RUNNING
    print("\n" + "=" * 70)
    print("üõë Sinal de interrup√ß√£o recebido. Encerrando monitor...")
    IS_RUNNING = False
    
def stop_monitor():
    """Para o monitor de forma gracioso"""
    global IS_RUNNING
    IS_RUNNING = False
    print("üõë Parando monitor de cota√ß√µes...")

def main():
    """Fun√ß√£o principal"""
    global IS_RUNNING, websocket_connection
    
    # Configura manipulador de sinais para encerramento gracioso
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    print(f"üöÄ Iniciando monitor de cota√ß√µes para {TICKER}")
    print("üí° Pressione Ctrl+C para encerrar o monitor")
    print_table_header()
    
    try:
        # Conecta ao WebSocket usando a fun√ß√£o do websocket_client
        print("üîÑ Inicializando conex√£o WebSocket...")
        websocket_success = initialize_market_data_websocket(on_message, on_open)
        
        if not websocket_success:
            print("‚ùå Falha ao inicializar WebSocket. Verifique a configura√ß√£o.")
            return
        
        print("‚è≥ Aguardando conex√£o e mensagens...")
        print("üí° Para parar o monitor, pressione Ctrl+C")
        
        # Mant√©m o script rodando enquanto IS_RUNNING for True
        while IS_RUNNING:
            sleep(0.1)
            
    except KeyboardInterrupt:
        print("\n" + "=" * 70)
        print("üõë Monitor encerrado pelo usu√°rio (Ctrl+C).")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # Cleanup
        IS_RUNNING = False
        print("üßπ Limpando recursos...")
        print("‚úÖ Monitor encerrado com sucesso.")

if __name__ == "__main__":
    main()
