#!/usr/bin/env python3
"""
Script de inicializa√ß√£o para o Clear Trading Dashboard
Facilita a execu√ß√£o da interface web com verifica√ß√µes de ambiente
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 7):
        print("‚ùå Python 3.7 ou superior √© necess√°rio")
        print(f"   Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    return True

def check_dependencies():
    """Verifica se as depend√™ncias est√£o instaladas"""
    required_packages = [
        'fastapi',
        'uvicorn',
        'websockets',
        'jinja2',
        'aiofiles',
        'requests'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package} - n√£o encontrado")
    
    if missing_packages:
        print(f"\nüì¶ Instalando depend√™ncias faltantes...")
        try:
            subprocess.check_call([
                sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
            ])
            print("‚úÖ Depend√™ncias instaladas com sucesso")
            return True
        except subprocess.CalledProcessError:
            print("‚ùå Erro ao instalar depend√™ncias")
            print("   Tente executar manualmente: pip install -r requirements.txt")
            return False
    
    return True

def check_config_file():
    """Verifica se o arquivo de configura√ß√£o existe"""
    config_file = Path("clear_api_config.env")
    if config_file.exists():
        print("‚úÖ Arquivo de configura√ß√£o encontrado")
        return True
    else:
        print("‚ö†Ô∏è  Arquivo clear_api_config.env n√£o encontrado")
        print("   Certifique-se de configurar suas credenciais da ClearAPI")
        return False

def check_clearapi_modules():
    """Verifica se os m√≥dulos da ClearAPI est√£o dispon√≠veis"""
    clearapi_path = Path("ClearAPI")
    required_files = [
        "auth.py",
        "websocket_client.py", 
        "get_ticker_quote.py",
        "config.py"
    ]
    
    if not clearapi_path.exists():
        print("‚ùå Pasta ClearAPI n√£o encontrada")
        return False
    
    missing_files = []
    for file in required_files:
        if not (clearapi_path / file).exists():
            missing_files.append(file)
            print(f"‚ùå ClearAPI/{file} - n√£o encontrado")
        else:
            print(f"‚úÖ ClearAPI/{file}")
    
    if missing_files:
        print(f"\n‚ùå Arquivos da ClearAPI faltando: {', '.join(missing_files)}")
        return False
    
    return True

def check_frontend_files():
    """Verifica se os arquivos do frontend est√£o presentes"""
    frontend_files = [
        "frontend/templates/dashboard.html",
        "frontend/static/js/dashboard.js",
        "frontend/static/css/dashboard.css"
    ]
    
    missing_files = []
    for file in frontend_files:
        if not Path(file).exists():
            missing_files.append(file)
            print(f"‚ùå {file} - n√£o encontrado")
        else:
            print(f"‚úÖ {file}")
    
    if missing_files:
        print(f"\n‚ùå Arquivos do frontend faltando: {', '.join(missing_files)}")
        return False
    
    return True

def start_server(host="0.0.0.0", port=8000, reload=True):
    """Inicia o servidor FastAPI"""
    print(f"\nüöÄ Iniciando servidor em http://{host}:{port}")
    print("   Pressione Ctrl+C para parar o servidor")
    print("   O dashboard estar√° dispon√≠vel no navegador")
    
    try:
        import uvicorn
        uvicorn.run(
            "web_app:app",
            host=host,
            port=port,
            reload=reload,
            log_level="info"
        )
    except KeyboardInterrupt:
        print("\nüëã Servidor parado pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro ao iniciar servidor: {e}")
        return False
    
    return True

def main():
    """Fun√ß√£o principal"""
    print("üîç Clear Trading Dashboard - Verifica√ß√£o de Sistema\n")
    
    # Verifica√ß√µes do sistema
    checks = [
        ("Vers√£o do Python", check_python_version),
        ("Depend√™ncias Python", check_dependencies),
        ("Arquivo de configura√ß√£o", check_config_file),
        ("M√≥dulos ClearAPI", check_clearapi_modules),
        ("Arquivos do frontend", check_frontend_files)
    ]
    
    all_checks_passed = True
    
    for check_name, check_func in checks:
        print(f"\nüìã Verificando {check_name}:")
        if not check_func():
            all_checks_passed = False
    
    print("\n" + "="*50)
    
    if not all_checks_passed:
        print("‚ùå Algumas verifica√ß√µes falharam")
        print("   Corrija os problemas acima antes de continuar")
        return False
    
    print("‚úÖ Todas as verifica√ß√µes passaram!")
    
    # Pergunta se quer iniciar o servidor
    try:
        response = input("\nüöÄ Deseja iniciar o servidor agora? (s/N): ").strip().lower()
        if response in ['s', 'sim', 'y', 'yes']:
            # Pequena pausa para melhor UX
            time.sleep(1)
            return start_server()
        else:
            print("\nüí° Para iniciar manualmente:")
            print("   python web_app.py")
            print("   ou")
            print("   uvicorn web_app:app --host 0.0.0.0 --port 8000 --reload")
            return True
    except KeyboardInterrupt:
        print("\nüëã Saindo...")
        return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
